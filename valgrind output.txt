 valgrind ./a.out
==387== Memcheck, a memory error detector
==387== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==387== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==387== Command: ./a.out
==387==
==387== error calling PR_SET_PTRACER, vgdb might block

1. sumar dos polinomios generados
2. restar dos polinomios generados
3. copiar un polinomio ingresado
4. multiplicar dos polinomios generados
5. opcion sair
4

Ingrese el grado maximo del primer polinomio: 3

Ingrese el grado maximo del segundo polinomio: 4

El primer polinomio generado:

32668831 x^3 - 2051017545 x^2 - 1239531134 x^1 - 1009303421

El segundo polinomio generado:

1543350392 x^4 + 1037395740 x^3 - 230494055 x^2 + 2023830650 x^1 - 956229418

x  ----------------------------------------------------------------------

==387== Invalid read of size 8
==387==    at 0x109308: multiplicarPolinomioRyConc (in /home/ignacio/Trabajo-1/a.out)
==387==    by 0x109352: multiplicarPolinomioRyConc (in /home/ignacio/Trabajo-1/a.out)
==387==    by 0x109352: multiplicarPolinomioRyConc (in /home/ignacio/Trabajo-1/a.out)
==387==    by 0x109352: multiplicarPolinomioRyConc (in /home/ignacio/Trabajo-1/a.out)
==387==    by 0x109352: multiplicarPolinomioRyConc (in /home/ignacio/Trabajo-1/a.out)
==387==    by 0x1098A8: menu (in /home/ignacio/Trabajo-1/a.out)
==387==    by 0x109968: main (in /home/ignacio/Trabajo-1/a.out)
==387==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==387==
==387==
==387== Process terminating with default action of signal 11 (SIGSEGV)
==387==  Access not within mapped region at address 0x8
==387==    at 0x109308: multiplicarPolinomioRyConc (in /home/ignacio/Trabajo-1/a.out)
==387==    by 0x109352: multiplicarPolinomioRyConc (in /home/ignacio/Trabajo-1/a.out)
==387==    by 0x109352: multiplicarPolinomioRyConc (in /home/ignacio/Trabajo-1/a.out)
==387==    by 0x109352: multiplicarPolinomioRyConc (in /home/ignacio/Trabajo-1/a.out)
==387==    by 0x109352: multiplicarPolinomioRyConc (in /home/ignacio/Trabajo-1/a.out)
==387==    by 0x1098A8: menu (in /home/ignacio/Trabajo-1/a.out)
==387==    by 0x109968: main (in /home/ignacio/Trabajo-1/a.out)
==387==  If you believe this happened as a result of a stack
==387==  overflow in your program's main thread (unlikely but
==387==  possible), you can try to increase the size of the
==387==  main thread stack using the --main-stacksize= flag.
==387==  The main thread stack size used in this run was 8388608.
==387==
==387== HEAP SUMMARY:
==387==     in use at exit: 312 bytes in 13 blocks
==387==   total heap usage: 15 allocs, 2 frees, 1,336 bytes allocated
==387==
==387== LEAK SUMMARY:
==387==    definitely lost: 0 bytes in 0 blocks
==387==    indirectly lost: 0 bytes in 0 blocks
==387==      possibly lost: 0 bytes in 0 blocks
==387==    still reachable: 312 bytes in 13 blocks
==387==         suppressed: 0 bytes in 0 blocks
==387== Rerun with --leak-check=full to see details of leaked memory
==387==
==387== For counts of detected and suppressed errors, rerun with: -v
==387== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)